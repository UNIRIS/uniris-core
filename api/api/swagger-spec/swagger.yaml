swagger: "2.0"

basePath: /api

info:
  description: |
    This is the endpoints provided by the UNIRIS robot.
    This API is documented in **OpenAPI format**
    You can find out more about the robot code here [http://github.com/uniris/uniris-core](http://github.com/uniris/uniris-core)
  version: 1.0
  title: UNIRIS API
  contact:
    name: UNIRIS Support
    email: dev@uniris.io

produces:
  - application/json

tags:
  - name: Account
    description: Manage and query accounts
  - name: Shared
    description: About shared information
  - name: Transaction
    description: Transaction information

paths:

  /contract:
    post:
      tags:
        - Smart contracts
      parameters:
        - name: form
          in: body
          required: true
          schema:
            $ref: "#/definitions/SmartContractCreationForm"
      responses:
        "201":
          description: Success
          schema:
            $ref: "#/definitions/SmartContractCreationResult"
        default:
          description: Error
          schema:
            $ref: "#/definitions/Error"

  /transaction/{addr}/status/{hash}:
    get:
      tags:
        - Transaction
      summary: Get the transaction status
      description: Retrieve the status of a transaction
      operationId: getTransactionStatus
      parameters:
        - name: addr
          in: path
          required: true
          description: Encrypted address (account, smart contract)
          type: string
        - name: hash
          in: path
          required: true
          description: Transaction hash
          type: string
      responses:
        "200":
          description: Transaction status
          schema:
            $ref: "#/definitions/TransactionStatus"
        default:
          description: Error
          schema:
            $ref: "#/definitions/Error"

  /sharedkeys/{publicKey}:
    get:
      tags:
        - Shared
      summary: Get the latest shared keys
      description: Retrieve the last shared keys
      operationId: getSharedKeys
      parameters:
        - name: publicKey
          in: path
          required: true
          description: Emitter public key
          type: string
        - name: signature
          in: query
          required: false
          type: string
          description: Signature of the public key
      responses:
        "200":
          description: Shared keys
          schema:
            $ref: "#/definitions/SharedKeysResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/Error"

  /account:
    post:
      tags:
        - Account
      summary: Enroll a new user
      description: Creates a new wallet
      operationId: createAccount
      parameters:
        - name: account
          in: body
          required: true
          schema:
            $ref: "#/definitions/AccountCreationRequest"
          description: Account creation request
      responses:
        "201":  
          description: Account creation response
          schema:
            $ref: "#/definitions/AccountCreationResult"
        default:
          description: Error
          schema:
            $ref: "#/definitions/Error"
          
  /account/{hash}:
      head:
        tags:
          - Account
        summary: Check if an account exist
        operationId: existAccount
        parameters:
          - name: hash
            in: path
            required: true
            type: string
            description: Encrypted hash of the ID's public key
        responses:
          "200":
            description: Existance of the account
            headers:
              Account-Exist:
                type: boolean
                description: Defines if the ressource exist or not
          default:
            description: Error
            headers:
              Error:
                type: string
                description: Unexpected error
      get:
        tags:
        - Account
        summary: Get account's details
        description: |
          Retrieve account details by requesting the data service of the UNIRIS robot.
          All the data are encrypted and need to be decrypted by the emitter using ID keys.
        operationId: getAccount
        parameters:
          - name: hash
            in: path
            required: true
            type: string
            description: Encrypted hash of the ID 's public key
          - name: signature
            in: query
            required: true
            type: string
            description: Signature of the encrypted hash by the shared emitter private key
        responses:
          "200":
            description: Encrypted account details
            schema:
              $ref: "#/definitions/AccountDetails"
          default:
            description: Error
            schema:
              $ref: "#/definitions/Error"

definitions:
  Error:
    type: object
    required:
      - error_message
      - error_code
    properties:
      error_message:
        type: string
        description: Error message
      error_code:
        type: int
        description: HTTP code error
      error_signature:
        type: string
        description: Signature validating the error
  AccountDetails:
    required:
      - encrypted_wallet
      - encrypted_aes_key
      - encrypted_address
      - signature
    properties:
      encrypted_wallet:
        description: Encrypted Wallet details
        type: string
      encrypted_aes_key:
        description: Encrypted key which encrypt the wallet
        type: string
      encrypted_address:
        description: Encryted address with EM key
        type: string
      signature:
        description: Request signature
        type: string
  AccountCreationRequest:
    required:
      - encrypted_id
      - encrypted_keychain
      - signature
    properties:
      encrypted_id:
        description: Encrypted ID
        type: string
      encrypted_keychain:
        descrpition: Encrypted Keychain
        type: string
      signature:
        description: Request signature
        type: string

  AccountCreationResult:
    required:
      - transactions
      - signature
    properties:
      transactions:
        description: Transactions hash for the wallet creation
        type: object
        properties:
          required:
            - id
            - keychain
          id:
            $ref: "#/definitions/TransactionResult"
            description: ID transaction result
          keychain:
            $ref: "#/definitions/TransactionResult"
            description: Keychain transaction result

  TransactionResult:
    required:
      - transaction_hash
      - master_peer_ip
    properties:
      transaction_hash:
        type: string
        description: Transaction hash
      master_peer_ip:
        type: string
        description: IP of the master peer which lead the transaction processing
      signature:
        type: string
        description: Signature of the welcome node

  SharedKeysResponse:
    required:
      - shared_emitter_keys
      - shared_robot_pubkey
    properties:
      shared_robot_pubkey:
        type: string
        description: Robot shared public key
      shared_emitter_keys:
        description: List of the shared keys for the emitters
        type: array
        items:
          type: object
          required:
            - public_key
            - encrypted_private_key
          properties:
            public_key:
              type: string
              description: Emitter shared public key
            encrypted_private_key:
              type: string
              description: Encrypted shared emitter private key

  

  TransactionStatus:
    required:
      - status
    properties:
      status:
        description: Status of the transaction
        type: string
        enum:
          - Pending
          - Success
          - Failure
          - Unknown

  SmartContractCreationForm:
    required:
      - address
      - code
      - public_key
      - signature
      - em_signature
      - request_signature
    properties:
      address:
        type: string
      code:
        type: string
      event:
        type: string
      public_key:
        type: string
      signature:
        type: string
      em_signature:
        type: string
      request_signature:
        type: string

  SmartContractCreationResult:
    required:
      - address
    properties:
      address:
        type: string