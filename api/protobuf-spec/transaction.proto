syntax = "proto3";

package api;

service TransactionService {
    rpc GetLastTransaction(GetLastTransactionRequest) returns (GetLastTransactionResponse);
    rpc GetTransactionStatus(GetTransactionStatusRequest) returns (GetTransactionStatusResponse);
    rpc StoreTransaction(StoreTransactionRequest) returns (StoreTransactionResponse);
    rpc TimeLockTransaction(TimeLockTransactionRequest) returns (TimeLockTransactionResponse);
    rpc LeadTransactionMining(LeadTransactionMiningRequest) returns (LeadTransactionMiningResponse);
    rpc ConfirmTransactionValidation(ConfirmTransactionValidationRequest) returns (ConfirmTransactionValidationResponse);
}

message GetLastTransactionRequest{
    string transaction_address = 1;
    TransactionType type = 2;
    int64 timestamp = 3;
    string signature_request = 4;
}

message GetLastTransactionResponse {
    Transaction transaction = 1;
    int64 timestamp = 2;
    string signature_response = 3;
}

message GetTransactionStatusRequest {
    string transaction_hash = 1;
    int64 timestamp = 2;
    string signature_request = 3;
}

message GetTransactionStatusResponse {
    TransactionStatus status = 1;
    int64 timestamp = 2;
    string signature_response = 3;
}

message StoreTransactionRequest {
    MinedTransaction mined_transaction = 1;
    int32 minimum_validations = 2;
    int64 timestamp = 3;
    string signature_request = 4;
}

message StoreTransactionResponse {
    int64 timestamp = 1;
    string signature_response = 2;
}

message TimeLockTransactionRequest {
    string transaction_hash = 1;
    string address = 2;
    string master_node_public_key = 3;
    int64 timestamp = 4;
    string signature_request = 5;
}

message TimeLockTransactionResponse {
    int64 timestamp = 1;
    string signature_response = 2;
}

message LeadTransactionMiningRequest {
    Transaction transaction = 1;
    int32 minimum_validations = 2;
    repeated NodeHeader welcome_headers = 3;
    int64 timestamp = 4;
    string signature_request = 5;
}

message LeadTransactionMiningResponse {
    int64 timestamp = 1;
    string signature_response = 2;
}

message ConfirmTransactionValidationRequest {
    Transaction transaction = 1;
    MasterValidation master_validation = 2;
    int64 timestamp = 3;
    string signature_request = 4;
}

message ConfirmTransactionValidationResponse {
    Validation validation = 1;
    int64 timestamp = 2;
    string signature_response = 3;
}


message SharedKeyPair{
    string encrypted_private_key = 1;
    string public_key = 2;
}

enum TransactionType {
    KEYCHAIN = 0;
    ID = 1;
    CONTRACT_CREATION = 2;
}

message Transaction {
    string address = 1;
    TransactionType type = 2;
    map<string, string> data = 3;
    int64 timestamp = 4;
    string public_key = 5;
    string signature = 6;
    string emitter_signature = 7;
    SharedKeyPair shared_keys_emitter_proposal = 8;
    string transaction_hash = 9;
}

message MasterValidation {
    repeated string previous_validation_nodes = 1;
    string proof_of_work = 2;
    Validation pre_validation = 3;
    repeated NodeHeader welcome_headers = 4;
    repeated NodeHeader validation_headers = 5;
    repeated NodeHeader storage_headers = 6;
}

message NodeHeader {
    string public_key = 1;
    bool isUnreachable = 2;
    bool isMaster = 3;
    int32 patchNumber = 4;
    bool isOK = 5;
}

message Validation {
    enum ValidationStatus {
        NO = 0;
        OK = 1;
    }
    
    string public_key = 1;
    ValidationStatus status = 2;
    int64 timestamp = 3;
    string signature = 4;
}

message MinedTransaction {
    Transaction transaction = 1;
    MasterValidation master_validation = 2;
    repeated Validation confirm_validations = 3;
}


enum TransactionStatus {
    UNKNOWN = 0;
    IN_PROGRESS = 1;
    SUCCESS = 2;
    FAILURE = 3;
}